{"version":3,"sources":["components/navigation/NavDrawer.tsx","utility/constants.ts","components/search/Search.tsx","components/navigation/Navigation.tsx","utility/FormatUtils.ts","components/player/MediaPlayer.tsx","api/ApiRepository.ts","api/LocalRepository.ts","api/DataManager.ts","components/browse/PodcastEntry.tsx","components/browse/PodcastBrowser.tsx","components/detail/EpisodeEntry.tsx","components/detail/PodcastDetail.tsx","components/subscriptions/Subscriptions.tsx","auth/Callback.tsx","auth/Auth.ts","components/Layout.tsx","App.tsx","utility/DeviceUtils.ts","serviceWorker.ts","index.tsx"],"names":["NavDrawer","closeDrawer","_this","props","mobileOpen","handleDrawerToggle","this","auth","login","logout","_this2","_this$props","classes","theme","isAuthenticated","drawer","react_default","a","createElement","className","toolbar","index_es","button","icons_index_es","primary","onClick","lib","to","categories","map","category","key","id","title","root","smUp","implementation","variant","anchor","direction","open","onClose","paper","drawerPaper","xsDown","Component","withStyles","createStyles","display","Object","defineProperty","breakpoints","up","width","flexShrink","appBar","marginLeft","concat","menuButton","marginRight","mixins","content","flexGrow","padding","spacing","unit","withTheme","Search","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","querySearch","_ref","asyncToGenerator","regenerator_default","mark","_callee","term","api","podcasts","wrap","_context","prev","next","length","searchPodcasts","sent","setState","stop","_x","apply","arguments","state","isOpen","_this$state","Entry","podcast","encodeURIComponent","rssUrl","alignItems","image","src","imageUrl","alt","search","searchIcon","Search_default","placeholder","inputRoot","input","inputInput","onChange","event","target","value","onFocus","onBlur","setTimeout","in","style","position","maxWidth","backgroundColor","palette","background","overflow","maxHeight","borderRadius","height","shape","fade","common","white","&:hover","pointerEvents","justifyContent","color","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","Navigation","onDrawerToggle","isMobile","CssBaseline_default","AppBar_default","Toolbar_default","IconButton_default","aria-label","Menu_default","Typography_default","noWrap","grow","search_Search","navigation_NavDrawer","children","formatTime","timeSeconds","sec_num","parseInt","hours","Math","floor","minutes","seconds","removeTags","text","replace","MediaPlayer","playbackFinished","setCurrentPodcast","paused","savePlaybackPosition","audioObject","episode","media","info","episodeName","time","round","currentTime","isCompleted","setListenInfo","loadPlaybackPosition","initializePodcastFromProps","_this$props$media","autoplay","load","play","onForward","onRewind","onTogglePause","pause","onSeek","e","v","duration","onChangeVolume","volume","onHandleTimeUpdate","document","loop","ontimeupdate","onended","imageLoaded","icon","bottom","onLoad","size","component","Link","textDecoration","author","Slider_default","min","max","isNaN","PureComponent","API","require","process","REACT_APP_PODCAST_API_URL","SUBS","ApiRepository","fetch","then","response","json","data","catch","query","categoryId","accessToken","path","getInjectedFetch","listenInfo","url","queryType","undefined","body","headers","Headers","content-type","Authorization","method","JSON","stringify","LocalRepository","localStorage","setItem","ParseKey","removeItem","feed","link","item","getItem","parse","DataManager","local","lastUpdate","parsePodcastFeed","setFeed","getFeed","getCategories","setCategories","getTopPodcasts","setCategoryPodcasts","getCategoryPodcasts","getPodcastByCategory","toString","getSubscriptions","subs","addSubscription","deleteSubscription","listen","setPlaybackTime","getListenInfo","getPlaybackTime","getCurrentPodcast","PodcastEntry","isLoaded","timeout","_paper","down","margin","PodcastBrowser","onPodcastClick","selectedPodcast","dialogOpen","Grid_default","container","justify","Array","from","keys","num","components_browse_PodcastEntry","styles","EpisodeEntry","onEpisodeSelect","onEpisodeSelected","selectedEpisode","_this$props2","expandIcon","stopPropagation","marginTop","description","PodcastDetail","componentWillMount","rssFeed","_feed","loading","isSubscribed","onSubscribeClick","_callee2","_context2","visibleEpisodes","_this$state2","_this$props3","window","outerHeight","outerWidth","fullScreen","Fragment","disableTypography","items","slice","detail_EpisodeEntry","_onEpisodeSelected","oldState","Subscriptions","subscriptions","console","log","browse_PodcastBrowser","Callback","handleAuthentication","CircularProgress_default","Auth","routeProps","accessTokenCallback","idToken","expiresAt","auth0","WebAuth","domain","audience","clientID","redirectUri","responseType","scope","parseHash","err","authResult","setSession","history","alert","error","getAccessToken","getIdToken","expiresIn","Date","getTime","renewSession","checkSession","errorDescription","authorize","Layout","_Component","displayName","name","onDialogClose","goBack","push","nextState","test","location","hash","updateApiAccessToken","podcastData","top","inherits","createClass","_componentWillMount","loadedPodcasts","forEach","loadedPodcast","_this3","RoutingContents","Switch","Route","render","Subscriptions_Subscriptions","match","params","exact","detail_PodcastDetail","rss","Callback_Callback","Redirect","navigation_Navigation","MediaPlayer_MediaPlayer","withRouter","App","updatePredicate","navigator","userAgent","innerWidth","addEventListener","removeEventListener","components_Layout","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","BrowserRouter","App_App","getElementById","URL","href","origin","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c1fdab21.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Divider,\n  Drawer,\n  Hidden,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles\n} from \"@material-ui/core\";\nimport { Person, BarChart, Star } from \"@material-ui/icons\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { drawerWidth } from \"../../utility/constants\";\nimport { Category } from \"../../utility/types\";\nimport Auth from \"../../auth/Auth\";\n\n/**\n * CSS styles for the navigation drawer.\n * @param theme Theme of the navigation drawer.\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\"\n    },\n    drawer: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: drawerWidth,\n        flexShrink: 0\n      }\n    },\n    appBar: {\n      marginLeft: drawerWidth,\n      [theme.breakpoints.up(\"sm\")]: {\n        width: `calc(100% - ${drawerWidth}px)`\n      }\n    },\n    menuButton: {\n      marginRight: 20,\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"none\"\n      }\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n      width: drawerWidth\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing.unit * 3\n    }\n  });\n\n/**\n * Required properties for the navigation drawer, also bundling the current styles.\n */\ninterface INavDrawerProps extends WithStyles<typeof styles> {\n  theme: Theme; //Theme of the drawer.\n  mobileOpen: boolean; //Indicates if the mobile drawer should be opened.\n  categories: Category[]; //Categories to display.\n  handleDrawerToggle: () => void; //Called when the drawer requests to be toggled.\n  auth: Auth; //Auth0 authentication object.\n}\n\n/**\n * State variables of the navigation drawer.\n */\n\ninterface INavDrawerState {}\n\n/**\n * Navigation drawer for selecting various routes of the application.\n */\nclass NavDrawer extends Component<INavDrawerProps, INavDrawerState> {\n  /**\n   * Closes the drawer if the mobile varient has been opened.\n   */\n  closeDrawer = () => {\n    if (this.props.mobileOpen) this.props.handleDrawerToggle();\n  };\n\n  login() {\n    this.props.auth.login();\n  }\n\n  logout() {\n    this.props.auth.logout();\n  }\n\n  render() {\n    const { classes, theme } = this.props;\n    const { isAuthenticated } = this.props.auth;\n\n    const drawer = (\n      <div>\n        {/* Login */}\n        <div className={classes.toolbar}>\n          <List>\n            <ListItem button>\n              <ListItemIcon>\n                <Person />\n              </ListItemIcon>\n              {!isAuthenticated() ? (\n                <ListItemText primary=\"Sign In\" onClick={() => this.login()} />\n              ) : (\n                <ListItemText\n                  primary=\"Sign Out\"\n                  onClick={() => this.logout()}\n                />\n              )}\n            </ListItem>\n          </List>\n        </div>\n\n        <Divider />\n        <List>\n          {/* Top */}\n          <LinkContainer to=\"/top\">\n            <ListItem button>\n              <ListItemIcon>\n                <BarChart />\n              </ListItemIcon>\n              <ListItemText primary=\"Top\" onClick={this.closeDrawer} />\n            </ListItem>\n          </LinkContainer>\n\n          {/* Subscribed */}\n          {isAuthenticated() && (\n            <LinkContainer to=\"/subscribed\">\n              <ListItem button>\n                <ListItemIcon>\n                  <Star />\n                </ListItemIcon>\n                <ListItemText primary=\"Subscribed\" onClick={this.closeDrawer} />\n              </ListItem>\n            </LinkContainer>\n          )}\n        </List>\n        <Divider />\n        <List>\n          {/* Categories */}\n          {this.props.categories.map(category => (\n            <LinkContainer key={category.id} to={\"/browse/\" + category.id}>\n              <ListItem button>\n                <ListItemText\n                  primary={category.title}\n                  onClick={this.closeDrawer}\n                />\n              </ListItem>\n            </LinkContainer>\n          ))}\n        </List>\n      </div>\n    );\n\n    return (\n      <div className={classes.root}>\n        <nav className={classes.drawer}>\n          {/* Mobile varient of the navigation drawer */}\n          <Hidden smUp implementation=\"css\">\n            <Drawer\n              variant=\"temporary\"\n              anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n              open={this.props.mobileOpen}\n              onClose={this.props.handleDrawerToggle}\n              classes={{\n                paper: classes.drawerPaper\n              }}\n            >\n              {drawer}\n            </Drawer>\n          </Hidden>\n\n          {/* Desktop varient of the navigation drawer */}\n          <Hidden xsDown implementation=\"css\">\n            <Drawer\n              classes={{\n                paper: classes.drawerPaper\n              }}\n              variant=\"permanent\"\n              open\n            >\n              {drawer}\n            </Drawer>\n          </Hidden>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(NavDrawer);\n","export const drawerWidth = 240;\n","import React, { Component, ChangeEvent } from \"react\";\nimport {\n  Card,\n  List,\n  ListItem,\n  ListItemText,\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n  Divider,\n  Fade,\n  InputBase\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport { Podcast } from \"../../utility/types\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport DataManager from \"../../api/DataManager\";\n\n/**\n * CSS styles of the top AppBar.\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n      position: \"relative\",\n      overflow: \"auto\",\n      maxHeight: 300\n    },\n    image: {\n      borderRadius: \"3px\",\n      height: \"50px\",\n      width: \"50px\"\n    },\n    search: {\n      position: \"relative\",\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25)\n      },\n      marginRight: theme.spacing.unit * 2,\n      marginLeft: 0,\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: theme.spacing.unit * 3,\n        width: \"auto\"\n      }\n    },\n    searchIcon: {\n      width: theme.spacing.unit * 9,\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    inputRoot: {\n      color: \"inherit\",\n      width: \"100%\"\n    },\n    inputInput: {\n      paddingTop: theme.spacing.unit,\n      paddingRight: theme.spacing.unit,\n      paddingBottom: theme.spacing.unit,\n      paddingLeft: theme.spacing.unit * 10,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        width: 120,\n        \"&:focus\": {\n          width: 200\n        }\n      }\n    }\n  });\n\ninterface ISearchProps extends WithStyles<typeof styles> {\n  api: DataManager; //Manager for I/O of API calls.\n}\n\ninterface ISearchState {\n  podcasts: Podcast[];\n  term: string;\n  isOpen: boolean;\n}\n\ninterface IEntryProps {\n  podcast: Podcast;\n}\n\nclass Search extends Component<ISearchProps, ISearchState> {\n  constructor(props: ISearchProps) {\n    super(props);\n\n    this.state = {\n      podcasts: [],\n      term: \"\",\n      isOpen: false\n    };\n  }\n\n  querySearch = async (term: string) => {\n    const { api } = this.props;\n\n    if (term.length >= 3) {\n      var podcasts = await api.searchPodcasts(term);\n\n      if (podcasts) this.setState({ podcasts: podcasts });\n    }\n  };\n\n  render() {\n    const { podcasts, isOpen } = this.state;\n    const { classes } = this.props;\n\n    function Entry(props: IEntryProps) {\n      const { podcast } = props;\n\n      return (\n        <LinkContainer to={\"/detail/\" + encodeURIComponent(podcast.rssUrl)}>\n          <div className=\"item\">\n            <ListItem alignItems=\"flex-start\" button={true}>\n              <div className={classes.image}>\n                <img\n                  className={classes.image}\n                  src={podcast.imageUrl}\n                  alt={podcast.title}\n                />\n              </div>\n              <ListItemText primary={podcast.title} />\n            </ListItem>\n            <Divider />\n          </div>\n        </LinkContainer>\n      );\n    }\n\n    return (\n      <div className={classes.search}>\n        <div className={classes.searchIcon}>\n          <SearchIcon />\n        </div>\n        <InputBase\n          placeholder=\"Search…\"\n          classes={{\n            root: classes.inputRoot,\n            input: classes.inputInput\n          }}\n          onChange={event => this.querySearch(event.target.value)}\n          onFocus={() => this.setState({ isOpen: true })}\n          onBlur={() => setTimeout(() => this.setState({ isOpen: false }), 500)}\n        />\n        {isOpen && (\n          <Fade in={isOpen}>\n            <Card style={{ position: \"absolute\" }}>\n              <List className={classes.root}>\n                {podcasts.map(podcast => (\n                  <Entry\n                    podcast={podcast}\n                    key={podcast.rssUrl + podcast.title}\n                  />\n                ))}\n              </List>\n            </Card>\n          </Fade>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Search);\n","import React, { Component } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles\n} from \"@material-ui/core/styles\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport NavDrawer from \"./NavDrawer\";\nimport { Category } from \"../../utility/types\";\nimport { drawerWidth } from \"../../utility/constants\";\nimport Auth from \"../../auth/Auth\";\nimport Search from \"../search/Search\";\nimport DataManager from \"../../api/DataManager\";\n\n/**\n * CSS styles of the top AppBar.\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\"\n    },\n    grow: {\n      flexGrow: 1\n    },\n    appBar: {\n      marginLeft: drawerWidth,\n      [theme.breakpoints.up(\"sm\")]: {\n        width: `calc(100% - ${drawerWidth}px)`\n      }\n    },\n    menuButton: {\n      marginRight: 20,\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"none\"\n      }\n    },\n    title: {\n      display: \"none\",\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"block\"\n      }\n    },\n    content: {\n      flexGrow: 1,\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`\n      }\n    },\n    search: {\n      position: \"relative\",\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25)\n      },\n      marginRight: theme.spacing.unit * 2,\n      marginLeft: 0,\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: theme.spacing.unit * 3,\n        width: \"auto\"\n      }\n    },\n    searchIcon: {\n      width: theme.spacing.unit * 9,\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    inputRoot: {\n      color: \"inherit\",\n      width: \"100%\"\n    },\n    inputInput: {\n      paddingTop: theme.spacing.unit,\n      paddingRight: theme.spacing.unit,\n      paddingBottom: theme.spacing.unit,\n      paddingLeft: theme.spacing.unit * 10,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        width: 120,\n        \"&:focus\": {\n          width: 200\n        }\n      }\n    }\n  });\n\n/**\n * Required properties of the top AppBar.\n */\ninterface INavigationProps extends WithStyles<typeof styles> {\n  categories: Category[]; //Categories to display.\n  isMobile: boolean; //Indicates if the device is a mobile device.\n  auth: Auth; //Auth0 authentication object.\n  api: DataManager; //Manager for I/O of API calls.\n}\n\n/**\n * State information of the top AppBar.\n */\ninterface INavigationState {\n  mobileOpen: boolean; //Indicates if the mobile navigation drawer is open.\n}\n\n/**\n * Provides a top AppBar component as well as drawer integration for search.\n * Child properties are displayed within the content area.\n */\nclass Navigation extends Component<INavigationProps, INavigationState> {\n  constructor(props: INavigationProps) {\n    super(props);\n\n    this.state = {\n      mobileOpen: false\n    };\n  }\n\n  /**\n   * Opens/closes the navigation drawer depending on it's current state.\n   */\n  onDrawerToggle = () => {\n    this.setState(state => ({ mobileOpen: !state.mobileOpen }));\n  };\n\n  render() {\n    const { classes, isMobile, api } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <CssBaseline />\n\n        {/* Top AppBar */}\n        <AppBar position=\"fixed\" className={classes.appBar}>\n          <Toolbar variant={isMobile ? \"regular\" : \"dense\"}>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"Open drawer\"\n              className={classes.menuButton}\n              onClick={this.onDrawerToggle}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              className={classes.title}\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap\n            >\n              Vocalia\n            </Typography>\n            <div className={classes.grow} />\n            <Search api={api} />\n          </Toolbar>\n        </AppBar>\n\n        {/* Navigation drawer. */}\n        <NavDrawer\n          auth={this.props.auth}\n          categories={this.props.categories}\n          handleDrawerToggle={this.onDrawerToggle}\n          mobileOpen={this.state.mobileOpen}\n        />\n\n        {/* Content to display. */}\n        <main className={classes.content}>\n          <Toolbar />\n          {this.props.children}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Navigation);\n","/**\n * Formats seconds into HH:MM:SS, or MM:SS if under an hour.\n * @param {Number (in seconds) to format.} num\n */\nexport function formatTime(timeSeconds: number) {\n  var converted = \"\" + timeSeconds;\n  var sec_num = parseInt(converted, 10);\n  var hours: number | string = Math.floor(sec_num / 3600);\n  var minutes: number | string = Math.floor((sec_num - hours * 3600) / 60);\n  var seconds: number | string = sec_num - hours * 3600 - minutes * 60;\n\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  if (hours === \"00\") {\n    return minutes + \":\" + seconds;\n  } else {\n    return hours + \":\" + minutes + \":\" + seconds;\n  }\n}\n\nexport function removeTags(text: string) {\n  if (text != null) {\n    return text.replace(/<\\/?[^>]+(>|$)/g, \"\");\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport { IconButton, Fab, Card, Typography, Fade } from \"@material-ui/core\";\nimport {\n  Forward30,\n  Replay10,\n  PlayArrow,\n  Pause,\n  VolumeUp\n} from \"@material-ui/icons\";\nimport Slider from \"@material-ui/lab/Slider\";\nimport \"./MediaPlayer.css\";\nimport { Listen, MediaState } from \"../../utility/types\";\nimport { formatTime } from \"../../utility/FormatUtils\";\nimport { Link } from \"react-router-dom\";\nimport DataManager from \"../../api/DataManager\";\n\n/**\n * Required properties for the player.\n */\ninterface IPlayerProps {\n  media: MediaState; //The media to be played.\n  isMobile: boolean; //Indicates if the current device is a mobile device.\n  api: DataManager; //Manages the I/O of API calls.\n}\n\n/**\n * State information belonging to the player.\n */\ninterface IPlayerState {\n  paused: boolean; //Indicates if playback has been paused.\n  time: number; //The current progress of playback.\n  volume: number; //Volume of playback.\n  audioObject: HTMLAudioElement; //HTML Audio element for audio control.\n  imageLoaded: boolean; //Indicates if the image has loaded in.\n}\n\n/**\n * Material-themed player for podcast episode objects.\n */\nexport default class MediaPlayer extends PureComponent<\n  IPlayerProps,\n  IPlayerState\n> {\n  /**\n   * Initializes the audio object for playback.\n   * @param props Required propeties.\n   */\n  constructor(props: IPlayerProps) {\n    super(props);\n\n    let audioObject = document.createElement(\"audio\");\n    audioObject.loop = false;\n    audioObject.ontimeupdate = () => this.onHandleTimeUpdate();\n    audioObject.onended = () => this.playbackFinished();\n\n    this.state = {\n      paused: true,\n      time: 0,\n      volume: 0.5,\n      audioObject: audioObject,\n      imageLoaded: false\n    };\n  }\n\n  playbackFinished = () => {\n    const { api } = this.props;\n\n    api.setCurrentPodcast(null);\n    this.setState({ paused: true });\n  };\n\n  /**\n   * Saves the current playback position to memory.\n   */\n  savePlaybackPosition = () => {\n    const { audioObject } = this.state;\n    const { api } = this.props;\n    const { episode } = this.props.media;\n\n    let info = {\n      rssUrl: episode.content,\n      episodeName: episode.title,\n      time: Math.round(audioObject.currentTime),\n      isCompleted: false\n    };\n\n    api.setListenInfo(info);\n  };\n\n  /**\n   * Loads the saved playback position from memory.\n   */\n  loadPlaybackPosition = async () => {\n    const { audioObject } = this.state;\n    const { episode } = this.props.media;\n\n    audioObject.currentTime = episode.time;\n  };\n\n  /**\n   * Called when a new episode has been selected.\n   * @param props Passed properties.\n   */\n  componentWillReceiveProps(props: IPlayerProps) {\n    const { audioObject } = this.state;\n    const { episode } = this.props.media;\n\n    if (episode.content !== audioObject.src) {\n      this.initializePodcastFromProps(props);\n    }\n  }\n\n  /**\n   * Called before initial mounting, sets initial mobile volume state, and sets the media source.\n   */\n  componentWillMount() {\n    const { isMobile } = this.props;\n    this.setState({ imageLoaded: false });\n    this.initializePodcastFromProps(this.props);\n\n    this.setState({\n      volume: isMobile ? 1 : this.state.volume\n    });\n  }\n\n  /**\n   * Called before unmounting, and stops the audio source from playing.\n   */\n  componentWillUnmount() {\n    this.state.audioObject.pause();\n  }\n\n  /**\n   * Loads a podacst from the props source into the player.\n   */\n  initializePodcastFromProps = (props: IPlayerProps) => {\n    const { audioObject } = this.state;\n    const { episode, autoplay } = this.props.media;\n\n    audioObject.src = episode.content;\n    audioObject.load();\n\n    this.loadPlaybackPosition();\n    if (autoplay) audioObject.play();\n\n    this.setState({ paused: !autoplay });\n  };\n\n  /**\n   * Called when a fast-forward event has occured.\n   */\n  onForward = () => {\n    const { audioObject } = this.state;\n\n    const currentTime = audioObject.currentTime + 30;\n    audioObject.currentTime = currentTime;\n    this.setState({ time: currentTime });\n  };\n\n  /**\n   * Called when a rewind event has occured.\n   */\n  onRewind = () => {\n    const { audioObject } = this.state;\n\n    const currentTime = audioObject.currentTime - 10;\n    audioObject.currentTime = currentTime;\n    this.setState({ time: currentTime });\n  };\n\n  /**\n   * Called when the play/pause button has been toggled.\n   */\n  onTogglePause = () => {\n    const { audioObject } = this.state;\n\n    if (this.state.paused) {\n      audioObject.play();\n      this.setState({ paused: false });\n    } else {\n      audioObject.pause();\n      this.setState({ paused: true });\n    }\n  };\n\n  /**\n   * Called when a seek has occured.\n   */\n  onSeek = (e: any, v: number) => {\n    const { audioObject } = this.state;\n\n    if (v <= audioObject.duration) {\n      this.setState({ time: v });\n      audioObject.currentTime = v;\n    }\n  };\n\n  /**\n   * Called when the volume has changed.\n   */\n  onChangeVolume = (e: any, v: number) => {\n    const { audioObject } = this.state;\n\n    this.setState({ volume: v });\n    audioObject.volume = v;\n  };\n\n  /**\n   * Updates the current time in the component state.\n   */\n  onHandleTimeUpdate = () => {\n    const { audioObject } = this.state;\n    this.setState({ time: audioObject.currentTime });\n    this.savePlaybackPosition();\n  };\n\n  render() {\n    let icon = this.state.paused ? <PlayArrow /> : <Pause />;\n\n    const { isMobile } = this.props;\n    const { episode } = this.props.media;\n    const { time, volume, audioObject, imageLoaded } = this.state;\n\n    return (\n      <Card\n        className=\"player\"\n        style={{\n          width: \"100%\",\n          position: \"sticky\",\n          bottom: 0\n        }}\n      >\n        {/* Image & Playback */}\n        <div className=\"player-left\">\n          {!isMobile && episode.imageUrl != null && (\n            <div className=\"image\">\n              {episode.imageUrl != null}\n              <Fade in={imageLoaded}>\n                <img\n                  alt=\"podcast-logo\"\n                  src={episode.imageUrl}\n                  onLoad={() => this.setState({ imageLoaded: true })}\n                />\n              </Fade>\n            </div>\n          )}\n        </div>\n\n        <IconButton className=\"icon\" onClick={this.onRewind}>\n          <Replay10 />\n        </IconButton>\n\n        <Fab size=\"small\" color=\"primary\" onClick={this.onTogglePause}>\n          {icon}\n        </Fab>\n\n        <IconButton className=\"icon\" onClick={this.onForward}>\n          <Forward30 />\n        </IconButton>\n\n        {/* Seek & Naming */}\n        <div className=\"player-center\">\n          <div className=\"no-wrap\">\n            <div className=\"episode\">\n              <span className=\"episode-title\">\n                <Typography component=\"h6\" variant=\"h6\">\n                  {episode.title}\n                </Typography>\n              </span>\n            </div>\n\n            <div className=\"title\">\n              <span className=\"podcast-title\">\n                <Link\n                  to={\"/detail/\" + encodeURIComponent(episode.rssUrl)}\n                  style={{ textDecoration: \"none\" }}\n                >\n                  <Typography component=\"p\" color=\"textSecondary\">\n                    {episode.author}\n                  </Typography>\n                </Link>\n              </span>\n            </div>\n          </div>\n\n          <div className=\"seek-bar\">\n            <Slider\n              min={0}\n              max={audioObject.duration}\n              value={time}\n              onChange={this.onSeek}\n            />\n            <span className=\"time-text current-time\">{formatTime(time)}</span>\n\n            <span className=\"time-text time-remaining\">\n              {formatTime(\n                isNaN(audioObject.duration) ? 0 : audioObject.duration\n              )}\n            </span>\n          </div>\n        </div>\n\n        {/* Volume Control */}\n        {!isMobile && (\n          <div className=\"player-right\">\n            <VolumeUp className=\"icon\" />\n            <Slider\n              min={0}\n              max={1}\n              value={volume}\n              onChange={this.onChangeVolume}\n            />\n          </div>\n        )}\n      </Card>\n    );\n  }\n}\n","import { Category, Podcast, PodcastFeed, Listen } from \"../utility/types\";\nvar request = require(\"request\");\n\nconst API = process.env.REACT_APP_PODCAST_API_URL;\nconst CATEGORIES = \"categories\";\nconst TOP = \"top\";\nconst PARSE = \"parse\";\nconst SEARCH = \"search\";\nconst SUBS = \"subscriptions\";\nconst LISTEN = \"listen\";\n\nexport default class ApiRepository {\n  /**\n   * Gets all categories from the Vocalia API.\n   */\n  async getCategories(): Promise<Category[] | null> {\n    return await fetch(API + CATEGORIES)\n      .then(response => response.json())\n      .then(data => data as Category[])\n      .catch(() => null);\n  }\n\n  /**\n   * Gets the top podcasts from the Vocalia API.\n   */\n  async getTopPodcasts(): Promise<Podcast[] | null> {\n    return await fetch(API + TOP)\n      .then(response => response.json())\n      .then(data => data as Podcast[])\n      .catch(() => null);\n  }\n\n  /**\n   * Gets the subscribed podcasts from the Vocalia API.\n   */\n  async searchPodcasts(query: string): Promise<Podcast[] | null> {\n    return await fetch(API + SEARCH + \"?term=\" + query)\n      .then(response => response.json())\n      .then(data => data as Podcast[])\n      .catch(() => null);\n  }\n\n  /**\n   * Gets the top podcasts from the provided category from the Vocalia API.\n   * @param categoryId ID of the category to filter by.\n   */\n  async getPodcastByCategory(categoryId: number): Promise<Podcast[] | null> {\n    return await fetch(API + TOP + \"?categoryId=\" + categoryId)\n      .then(response => response.json())\n      .then(data => data as Podcast[])\n      .catch(() => null);\n  }\n\n  /**\n   * Parses the RSS URL into a JSON formatted object with\n   * additional usage data using the Vocalia API.\n   * @param rssUrl URL to parse.\n   */\n  async parsePodcastFeed(\n    rssUrl: string,\n    accessToken: string | null\n  ): Promise<PodcastFeed | null> {\n    var path = API + PARSE + \"?rssUrl=\" + rssUrl;\n\n    return await this.getInjectedFetch(path, accessToken)\n      .then(response => response.json())\n      .then(data => data as PodcastFeed)\n      .catch(e => null);\n  }\n\n  /**\n   * Gets the subscriptions belonging to the user.\n   * @param accessToken Authentication token for API validation\n   */\n  async getSubscriptions(accessToken: string): Promise<Podcast[] | null> {\n    return await this.getInjectedFetch(API + SUBS, accessToken)\n      .then(response => response.json())\n      .then(data => data as Podcast[])\n      .catch(() => null);\n  }\n\n  /**\n   * Adds the specified podcast to the user's subscribed database.\n   * @param accessToken Access token used for API authentication.\n   * @param podcast Podcast to subscribe to.\n   */\n  async addSubscription(accessToken: string, podcast: Podcast) {\n    return await this.getInjectedFetch(\n      API + SUBS,\n      accessToken,\n      \"POST\",\n      podcast\n    );\n  }\n\n  /**\n   * Rempoves the specified podcast from the user's subscribed database.\n   * @param accessToken Access token used for API authentication.\n   * @param rssUrl RSS url of the podcast to unsubsribe from.\n   */\n  async deleteSubscription(accessToken: string, rssUrl: string) {\n    return await this.getInjectedFetch(\n      API + SUBS + \"?rssUrl=\" + rssUrl,\n      accessToken,\n      \"DELETE\"\n    );\n  }\n\n  /**\n   * Updates the listen info for the specified podcast.\n   * @param listenInfo Values to update.\n   * @param accessToken Access token used for API authentication.\n   */\n  async setListenInfo(accessToken: string, listenInfo: Listen) {\n    if (Math.round(listenInfo.time) % 5 == 0) {\n      await this.getInjectedFetch(API + LISTEN, accessToken, \"PUT\", listenInfo);\n    }\n  }\n\n  /**\n   * Gets the listen info for the specified podcast.\n   * @param rssUrl URL to get the listen info for.\n   * @param accessToken Access token for API authentication.\n   */\n  async getListenInfo(\n    accessToken: string,\n    rssUrl: string\n  ): Promise<Listen | null> {\n    return await this.getInjectedFetch(\n      API + LISTEN + \"?rssUrl=\" + rssUrl,\n      accessToken\n    )\n      .then(response => response.json())\n      .then(data => data as Listen)\n      .catch(() => null);\n  }\n\n  /**\n   * Injects a fetch object with access token headers and returns it.\n   * @param url Path to query.\n   * @param accessToken Access token to verify users.\n   */\n  private getInjectedFetch(\n    url: string,\n    accessToken: string | null,\n    queryType: string = \"GET\",\n    body: {} | null = null\n  ) {\n    var headers = new Headers({\n      \"content-type\": \"application/json\",\n      Authorization: \"Bearer \" + accessToken\n    });\n\n    return accessToken != null\n      ? fetch(url, {\n          headers: headers,\n          method: queryType,\n          body: body != null ? JSON.stringify(body) : null\n        })\n      : fetch(url, {\n          method: queryType,\n          body: body != null ? JSON.stringify(body) : null\n        });\n  }\n}\n","import {\n  PodcastEpisode,\n  Listen,\n  Category,\n  Podcast,\n  PodcastFeed\n} from \"../utility/types\";\n\nconst PLAYBACK_POSITION = \"|position\";\nconst CURRENT = \"|current\";\nconst CATEGORIES = \"|categories\";\nconst PODCASTS = \"|podcasts\";\nconst FEED = \"|feed\";\n\nexport default class LocalRepository {\n  /**\n   * Sets the local playback time for the provided url.\n   * @param url URL to save to.\n   * @param time Time to save.\n   */\n  setPlaybackTime(listenInfo: Listen) {\n    let key = listenInfo.rssUrl + PLAYBACK_POSITION;\n    localStorage.setItem(key, JSON.stringify(listenInfo));\n  }\n\n  /**\n   * Gets the playback time for the provided url from the local storage.\n   * @param url Podcast URL for querying.\n   */\n  getPlaybackTime(rssUrl: string): Listen | null {\n    let key = rssUrl + PLAYBACK_POSITION;\n    return this.ParseKey(key);\n  }\n\n  /**\n   * Sets the podcast URL as the current podcast.\n   * @param url Podcast to save as current.\n   */\n  setCurrentPodcast(episode: PodcastEpisode | null) {\n    if (episode == null) {\n      localStorage.removeItem(CURRENT);\n    } else {\n      localStorage.setItem(CURRENT, JSON.stringify(episode));\n    }\n  }\n\n  /**\n   * Gets the saved podcast, or null if not available.\n   */\n  getCurrentPodcast(): PodcastEpisode | null {\n    return this.ParseKey(CURRENT);\n  }\n\n  /**\n   * Stores the passed categories in the local storage.\n   */\n  setCategories(categories: Category[]) {\n    localStorage.setItem(CATEGORIES, JSON.stringify(categories));\n  }\n\n  /**\n   * Gets the stored categories if available.\n   */\n  getCategories(): Category[] | null {\n    return this.ParseKey(CATEGORIES);\n  }\n\n  /**\n   * Sets the podcasts belonging to the specified category.\n   * @param podcasts Podcasts to store.\n   * @param category Category the podcasts belong to.\n   */\n  setCategoryPodcasts(podcasts: Podcast[], category: string) {\n    let key = category + PODCASTS;\n    localStorage.setItem(key, JSON.stringify(podcasts));\n  }\n\n  /**\n   * Gets the podcasts belonging to the specified category.\n   * @param category Category to filter podcasts by.\n   */\n  getCategoryPodcasts(category: string): Podcast[] | null {\n    let key = category + PODCASTS;\n    return this.ParseKey(key);\n  }\n\n  /**\n   * Stores the feed into local storage.\n   */\n  setFeed(feed: PodcastFeed) {\n    let key = feed.link + FEED;\n    localStorage.setItem(key, JSON.stringify(feed));\n  }\n\n  /**\n   *\n   * @param rssUrl Returns the feed belonging to the required URL, or null if not available.\n   */\n  getFeed(rssUrl: string): PodcastFeed | null {\n    let key = rssUrl + FEED;\n    return this.ParseKey(key);\n  }\n\n  /**\n   * Returns items from local storage, or null if nothing is found.\n   * @param key Key to parse.\n   */\n  private ParseKey(key: string): any {\n    let item = localStorage.getItem(key);\n    if (item != null) return JSON.parse(item);\n    else return null;\n  }\n}\n","import ApiRepository from \"./ApiRepository\";\nimport LocalRepository from \"./LocalRepository\";\nimport {\n  Category,\n  Podcast,\n  PodcastFeed,\n  Listen,\n  PodcastEpisode\n} from \"../utility/types\";\n\nexport default class DataManager {\n  private api: ApiRepository = new ApiRepository();\n  private local: LocalRepository = new LocalRepository();\n  accessToken: string | null = null;\n\n  lastUpdate: number = 0;\n\n  /**\n   * Gets the subscribed podcasts from the Vocalia API.\n   */\n  async searchPodcasts(query: string): Promise<Podcast[] | null> {\n    return await this.api.searchPodcasts(query);\n  }\n\n  /**\n   * Parses the RSS URL into a JSON formatted object with\n   * additional usage data using the Vocalia API.\n   * @param rssUrl URL to parse.\n   */\n  async parsePodcastFeed(rssUrl: string): Promise<PodcastFeed | null> {\n    var podcast = await this.api.parsePodcastFeed(rssUrl, this.accessToken);\n    if (podcast != null) {\n      this.local.setFeed(podcast);\n      return podcast;\n    }\n\n    return this.local.getFeed(rssUrl);\n  }\n\n  /**\n   * Gets all categories from the Vocalia API.\n   */\n  async getCategories(): Promise<Category[] | null> {\n    var categories = await this.api.getCategories();\n\n    if (categories != null) {\n      this.local.setCategories(categories);\n      return categories;\n    }\n\n    return this.local.getCategories();\n  }\n\n  /**\n   * Gets the top podcasts from the Vocalia API.\n   */\n  async getTopPodcasts(): Promise<Podcast[] | null> {\n    var podcasts = await this.api.getTopPodcasts();\n\n    if (podcasts != null) {\n      this.local.setCategoryPodcasts(podcasts, \"top\");\n      return podcasts;\n    }\n\n    return this.local.getCategoryPodcasts(\"top\");\n  }\n\n  /**\n   * Gets the top podcasts from the provided category from the Vocalia API.\n   * @param categoryId ID of the category to filter by.\n   */\n  async getPodcastByCategory(categoryId: number): Promise<Podcast[] | null> {\n    var podcasts = await this.api.getPodcastByCategory(categoryId);\n\n    if (podcasts != null) {\n      this.local.setCategoryPodcasts(podcasts, categoryId.toString());\n      return podcasts;\n    }\n\n    return this.local.getCategoryPodcasts(categoryId.toString());\n  }\n\n  /**\n   * Gets the subscriptions belonging to the user.\n   */\n  async getSubscriptions(): Promise<Podcast[] | null> {\n    if (this.accessToken) {\n      var subs = await this.api.getSubscriptions(this.accessToken);\n\n      if (subs) {\n        this.local.setCategoryPodcasts(subs, \"subscriptions\");\n        return subs;\n      }\n    }\n    return this.local.getCategoryPodcasts(\"subscriptions\");\n  }\n\n  /**\n   * Adds the specified podcast to the user's subscribed database.\n   * @param podcast Podcast to subscribe to.\n   */\n  async addSubscription(podcast: Podcast) {\n    if (this.accessToken)\n      await this.api.addSubscription(this.accessToken, podcast);\n  }\n\n  /**\n   * Rempoves the specified podcast from the user's subscribed database.\n   * @param rssUrl RSS url of the podcast to unsubsribe from.\n   */\n  async deleteSubscription(rssUrl: string) {\n    if (this.accessToken)\n      await this.api.deleteSubscription(this.accessToken, rssUrl);\n  }\n\n  /**\n   * Updates the listen info for the specified podcast.\n   * @param listen Values to update.\n   */\n  async setListenInfo(listen: Listen) {\n    if (this.accessToken != null) {\n      if (this.lastUpdate != listen.time) {\n        this.lastUpdate = listen.time;\n        await this.api.setListenInfo(this.accessToken, listen);\n      }\n    }\n\n    this.local.setPlaybackTime(listen);\n  }\n\n  /**\n   * Gets lisen info for the specified podcast.\n   * @param rssUrl URL to fetch listen info for.\n   */\n  async getListenInfo(rssUrl: string): Promise<Listen | null> {\n    if (this.accessToken != null && rssUrl != \"undefined\") {\n      return await this.api.getListenInfo(this.accessToken, rssUrl);\n    }\n\n    return this.local.getPlaybackTime(rssUrl);\n  }\n\n  /**\n   * Gets the current podcast from the API.\n   */\n  getCurrentPodcast(): PodcastEpisode | null {\n    return this.local.getCurrentPodcast();\n  }\n\n  /**\n   * Sets the current podcast to the API.\n   * @param podcast Podcast to update information for.\n   */\n  async setCurrentPodcast(podcast: PodcastEpisode | null) {\n    this.local.setCurrentPodcast(podcast);\n  }\n}\n","import React, { Component } from \"react\";\nimport { Podcast } from \"../../utility/types\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport {\n  Card,\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n  Fade\n} from \"@material-ui/core\";\nimport \"./PodcastEntry.css\";\n\n/**\n * CSS Styles of the browser\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      [theme.breakpoints.down(\"sm\")]: {\n        height: 100,\n        width: 100,\n        margin: 4\n      },\n      [theme.breakpoints.up(\"md\")]: {\n        height: 140,\n        width: 140,\n        margin: 4\n      }\n    }\n  });\n\n/**\n * Properties for a podcast entry.\n */\ninterface IEntryProps extends WithStyles<typeof styles> {\n  podcast: Podcast;\n}\n\ninterface IEntryState {\n  isLoaded: boolean;\n}\n\n/**\n * Single podcast entry for display in the browser.\n * @param props Properties belonging to the podcast entry.\n */\nclass PodcastEntry extends Component<IEntryProps, IEntryState> {\n  constructor(props: IEntryProps) {\n    super(props);\n\n    this.state = {\n      isLoaded: false\n    };\n  }\n\n  render() {\n    const { classes, podcast } = this.props;\n    const { isLoaded } = this.state;\n\n    const Entry = (\n      <Card className={classes.paper + \" card\"}>\n        <Fade in={isLoaded} timeout={300}>\n          <img\n            src={podcast.imageUrl}\n            alt={podcast.title}\n            onLoad={() => this.setState({ isLoaded: true })}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        </Fade>\n      </Card>\n    );\n\n    return podcast.rssUrl != null ? (\n      <LinkContainer to={\"/detail/\" + encodeURIComponent(podcast.rssUrl)}>\n        {Entry}\n      </LinkContainer>\n    ) : (\n      Entry\n    );\n  }\n}\n\nexport default withStyles(styles)(PodcastEntry);\n","import React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Podcast } from \"../../utility/types\";\nimport PodcastEntry from \"./PodcastEntry\";\n\n/**\n * Properties passed into the browser.\n */\ninterface IBrowserProps {\n  podcasts: Podcast[]; //Podcast entries to display.\n}\n\n/**\n * State of the browser.\n */\ninterface IBrowserState {}\n\n/**\n * Component to display and interact with podcasts passed into it.\n */\nclass PodcastBrowser extends Component<IBrowserProps, IBrowserState> {\n  constructor(props: IBrowserProps) {\n    super(props);\n\n    this.state = {\n      dialogOpen: false,\n      selectedPodcast: {} as Podcast\n    };\n  }\n\n  /**\n   * Called when a podcast is clicked.\n   */\n  onPodcastClick = (podcast: Podcast) => {\n    this.setState({ selectedPodcast: podcast, dialogOpen: true });\n  };\n\n  render() {\n    const { podcasts } = this.props;\n\n    return (\n      <Grid container justify=\"space-evenly\">\n        {/* If podcasts are available, display them. Otherwise, display empty entries to fill the UI */}\n        {podcasts == null &&\n          Array.from(Array(100).keys()).map(num => (\n            <PodcastEntry key={num} podcast={{} as Podcast} />\n          ))}\n\n        {podcasts != null &&\n          podcasts.map(podcast => (\n            <PodcastEntry key={podcast.rssUrl} podcast={podcast} />\n          ))}\n\n        {podcasts != null &&\n          Array.from(Array(100 - podcasts.length).keys()).map(num => (\n            <PodcastEntry key={num} podcast={{} as Podcast} />\n          ))}\n      </Grid>\n    );\n  }\n}\n\nexport default PodcastBrowser;\n","import React, { Component } from \"react\";\nimport {\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  Typography,\n  IconButton\n} from \"@material-ui/core\";\nimport { ExpandMore, PlayArrow, Stop } from \"@material-ui/icons\";\nimport { removeTags } from \"../../utility/FormatUtils\";\nimport { PodcastEpisode } from \"../../utility/types\";\n\n/**\n * CSS styles for the entry.\n */\nconst styles = {\n  button: {\n    width: 32,\n    height: 32,\n    padding: 0\n  }\n};\n\n/**\n * Required properties for the episode entry.\n */\ninterface IEpisodeProps {\n  episode: PodcastEpisode; //Episode the component represents.\n  selectedEpisode: PodcastEpisode | null; //The currently playing episode.\n  onEpisodeSelected: (episode: PodcastEpisode) => void; //Called when the entry has been selected.\n}\n\n/**\n * State information for the episode entry.\n */\ninterface IEpisodeState {}\n\n/**\n * Contains title, description and details for a specific episode item.\n */\nclass EpisodeEntry extends Component<IEpisodeProps, IEpisodeState> {\n  /**\n   * Called when an episode is selected, either setting the episode to null\n   *  or the selected episode depending on what is currently playing.\n   */\n  onEpisodeSelect = () => {\n    const { episode, onEpisodeSelected, selectedEpisode } = this.props;\n\n    let selectedItem =\n      episode.content == (selectedEpisode != null && selectedEpisode.content)\n        ? ({ time: 0 } as PodcastEpisode)\n        : episode;\n    onEpisodeSelected(selectedItem);\n  };\n\n  render() {\n    const { episode, selectedEpisode } = this.props;\n\n    //Toggles between a stop button or play button depending if the\n    // current episode matches the object being represented.\n    let icon =\n      episode.content ==\n      (selectedEpisode != null && selectedEpisode.content) ? (\n        <Stop />\n      ) : (\n        <PlayArrow />\n      );\n\n    return (\n      <ExpansionPanel>\n        <ExpansionPanelSummary expandIcon={<ExpandMore />}>\n          <IconButton\n            style={styles.button}\n            onClick={e => {\n              this.onEpisodeSelect();\n              e.stopPropagation();\n            }}\n          >\n            {icon}\n          </IconButton>\n          <Typography style={{ marginTop: \"7px\", marginLeft: \"3px\" }}>\n            {episode.title}\n          </Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Typography>{removeTags(episode.description)}</Typography>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    );\n  }\n}\n\nexport default EpisodeEntry;\n","import React, { PureComponent } from \"react\";\nimport {\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Card,\n  Button,\n  Typography,\n  Fade\n} from \"@material-ui/core\";\nimport { PodcastFeed, PodcastEpisode, Podcast } from \"../../utility/types\";\nimport EpisodeEntry from \"./EpisodeEntry\";\nimport { removeTags } from \"../../utility/FormatUtils\";\nimport DataManager from \"../../api/DataManager\";\n\n/**\n * Properties required for the detail modal window.\n */\ninterface IDetailProps {\n  api: DataManager; //Class to manage I/O of API data.\n  rssFeed: string; //Feed to load.\n  open: boolean; //External control for dialog visibility.\n  isMobile: boolean; //Indicates if the device is a mobile device.\n  isAuthenticated: boolean; // Indicates if the user is authenticated.\n  selectedEpisode: PodcastEpisode | null; //The currently playing episode.\n  onClose: () => void; //Called when the dialog requests to be closed.\n  onEpisodeSelected: (episode: PodcastEpisode) => void; //Called when an episode isselected.\n}\n\n/**\n * State information for the detail modal window.\n */\ninterface IDetailState {\n  feed: PodcastFeed; //Currently loaded feed.\n  visibleEpisodes: number; //Number of visible episodes.\n  loading: boolean; //Indicates the feed is loading.\n  imageLoaded: boolean; //Indicates if the image has loaded.\n  isSubscribed: boolean; //Indicates if the user has subscribed to the current podcast.\n}\n\n/**\n * Modal window displaying title, description and episode information for a specific podcast.\n */\nclass PodcastDetail extends PureComponent<IDetailProps, IDetailState> {\n  constructor(props: IDetailProps) {\n    super(props);\n\n    this.state = {\n      feed: {} as PodcastFeed,\n      visibleEpisodes: 20,\n      loading: true,\n      imageLoaded: false,\n      isSubscribed: false\n    };\n  }\n\n  /**\n   * Updates the detail dialog. Only refreshes if the RSS URL has changed to prevent unnecessary re-renders.\n   */\n  componentWillMount = async () => {\n    const { rssFeed, api } = this.props;\n\n    if (rssFeed !== null) {\n      this.setState({ loading: true });\n      let feed = await api.parsePodcastFeed(rssFeed);\n\n      if (feed)\n        this.setState({\n          feed: feed,\n          loading: false,\n          isSubscribed: feed.isSubscribed\n        });\n    }\n  };\n\n  onSubscribeClick = async () => {\n    const { isSubscribed, feed } = this.state;\n    const { api, rssFeed } = this.props;\n\n    if (isSubscribed) {\n      await api.deleteSubscription(rssFeed);\n      this.setState({ isSubscribed: false });\n    } else {\n      await api.addSubscription({\n        title: feed.title,\n        rssUrl: feed.link,\n        imageUrl: feed.imageUrl,\n        isSubscribed: true\n      });\n      this.setState({ isSubscribed: true });\n    }\n  };\n\n  render() {\n    const {\n      feed,\n      visibleEpisodes,\n      loading,\n      imageLoaded,\n      isSubscribed\n    } = this.state;\n    const {\n      open,\n      onClose,\n      onEpisodeSelected,\n      selectedEpisode,\n      isMobile,\n      isAuthenticated\n    } = this.props;\n\n    let button = isSubscribed ? (\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={() => this.onSubscribeClick()}\n      >\n        Unsubscribe\n      </Button>\n    ) : (\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => this.onSubscribeClick()}\n      >\n        Subscribe\n      </Button>\n    );\n\n    return (\n      <Card\n        style={{\n          height: window.outerHeight,\n          width: window.outerWidth,\n          margin: -100\n        }}\n      >\n        <Dialog\n          open={open}\n          onClose={onClose}\n          fullScreen={isMobile}\n          maxWidth=\"md\"\n        >\n          {/* Requires a nested dialog to have the two stage screen dim and fade in on content load */}\n          <Dialog\n            open={!loading && this.props.open}\n            onClose={onClose}\n            fullScreen={isMobile}\n            maxWidth=\"md\"\n          >\n            {!loading && (\n              <React.Fragment>\n                <DialogTitle disableTypography={true}>\n                  <Typography component={\"span\"}>\n                    <div style={{ display: \"flex\" }}>\n                      <Fade in={imageLoaded}>\n                        <div style={{ height: 80, width: 80, paddingTop: 16 }}>\n                          <img\n                            src={feed.imageUrl}\n                            onLoad={() => this.setState({ imageLoaded: true })}\n                          />\n                        </div>\n                      </Fade>\n\n                      <div style={{ display: \"inline\", paddingLeft: 15 }}>\n                        <h2>{feed.title}</h2>\n                        <p>{removeTags(feed.description)}</p>\n                      </div>\n                    </div>\n                  </Typography>\n                  {isAuthenticated && button}\n                </DialogTitle>\n                <DialogContent style={{ paddingTop: 5 }}>\n                  {/* Episodes */}\n                  {feed.items != null &&\n                    feed.items\n                      .slice(0, visibleEpisodes)\n                      .map(item => (\n                        <EpisodeEntry\n                          key={item.content}\n                          episode={item}\n                          selectedEpisode={selectedEpisode}\n                          onEpisodeSelected={(episode: PodcastEpisode) =>\n                            onEpisodeSelected(episode)\n                          }\n                        />\n                      ))}\n\n                  {/* Load more button */}\n                  {visibleEpisodes < feed.items.length && (\n                    <Button\n                      onClick={() =>\n                        this.setState(oldState => ({\n                          visibleEpisodes: oldState.visibleEpisodes + 20\n                        }))\n                      }\n                      color=\"primary\"\n                    >\n                      Load More...\n                    </Button>\n                  )}\n                </DialogContent>\n\n                {/* Close button */}\n                {!loading && (\n                  <DialogActions>\n                    <Button onClick={this.props.onClose} color=\"primary\">\n                      Close\n                    </Button>\n                  </DialogActions>\n                )}\n              </React.Fragment>\n            )}\n          </Dialog>\n        </Dialog>\n      </Card>\n    );\n  }\n}\n\nexport default PodcastDetail;\n","import React, { Component } from \"react\";\nimport { Podcast } from \"../../utility/types\";\nimport Auth from \"../../auth/Auth\";\nimport PodcastBrowser from \"../browse/PodcastBrowser\";\nimport DataManager from \"../../api/DataManager\";\n\ninterface ISubscriptionsState {\n  subscriptions: Podcast[];\n}\n\ninterface ISubscriptionProps {\n  api: DataManager; //Manages the I/O of API calls.\n}\n\nexport default class Subscriptions extends Component<\n  ISubscriptionProps,\n  ISubscriptionsState\n> {\n  constructor(props: ISubscriptionProps) {\n    super(props);\n\n    this.state = {\n      subscriptions: []\n    };\n  }\n\n  async componentWillMount() {\n    const { api } = this.props;\n\n    let subscriptions = await api.getSubscriptions();\n    console.log(subscriptions);\n    if (subscriptions) this.setState({ subscriptions: subscriptions });\n  }\n\n  render() {\n    const { subscriptions } = this.state;\n    return <PodcastBrowser podcasts={subscriptions} />;\n  }\n}\n","import React, { Component } from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Auth from \"./Auth\";\nimport DataManager from \"../api/DataManager\";\n\ninterface ICallbackProps {\n  auth: Auth;\n}\n\nexport default class Callback extends Component<ICallbackProps> {\n  constructor(props: ICallbackProps) {\n    super(props);\n\n    const { auth } = this.props;\n\n    auth.handleAuthentication();\n  }\n\n  render() {\n    return <CircularProgress />;\n  }\n}\n","import auth0 from \"auth0-js\";\nimport { RouteComponentProps } from \"react-router\";\n\nexport default class Auth {\n  accessToken: string | null = null;\n  idToken: string | null = null;\n  expiresAt: number | null = null;\n  routeProps: RouteComponentProps;\n  accessTokenCallback: (accessToken: string) => void;\n\n  constructor(\n    routeProps: RouteComponentProps,\n    accessTokenCallback: (accessToken: string) => void\n  ) {\n    this.routeProps = routeProps;\n    this.accessTokenCallback = accessTokenCallback;\n  }\n\n  auth0 = new auth0.WebAuth({\n    domain: \"vocalia.eu.auth0.com\",\n    audience: \"https://api.vocalia.co.uk/podcast\",\n    clientID: \"uHe5eYe5imVEsBTnzcJciIHtj45N2px1\",\n    redirectUri: \"http://localhost:3000/callback\",\n    responseType: \"token id_token\",\n    scope: \"openid\"\n  });\n\n  handleAuthentication = () => {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        console.log(err);\n        this.routeProps.history.replace(\"/top\");\n        alert(`Error: ${err.error}. Check the console for further details.`);\n      }\n    });\n  };\n\n  getAccessToken = () => {\n    return this.accessToken;\n  };\n\n  getIdToken = () => {\n    return this.idToken;\n  };\n\n  setSession = (authResult: auth0.Auth0DecodedHash) => {\n    // Set isLoggedIn flag in localStorage\n    localStorage.setItem(\"isLoggedIn\", \"true\");\n\n    // Set the time that the access token will expire at\n    let expiresAt =\n      (authResult.expiresIn as number) * 1000 + new Date().getTime();\n    this.accessToken = authResult.accessToken as string;\n    this.idToken = authResult.idToken as string;\n    this.expiresAt = expiresAt;\n\n    this.accessTokenCallback(this.accessToken);\n\n    // navigate to the home route\n    this.routeProps.history.replace(\"/top\");\n  };\n\n  renewSession = () => {\n    this.auth0.checkSession({}, (err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        this.logout();\n        console.log(err);\n        alert(\n          `Could not get a new token (${err.error}: ${err.errorDescription}).`\n        );\n      }\n    });\n  };\n\n  logout = () => {\n    // Remove tokens and expiry time\n    this.accessToken = null;\n    this.idToken = null;\n    this.expiresAt = 0;\n\n    // Remove isLoggedIn flag from localStorage\n    localStorage.removeItem(\"isLoggedIn\");\n\n    // navigate to the home route\n    this.routeProps.history.replace(\"/top\");\n  };\n\n  login = () => {\n    this.auth0.authorize();\n  };\n\n  isAuthenticated = () => {\n    // Check whether the current time is past the\n    // access token's expiry time.\n    let expiresAt = this.expiresAt as number;\n    return new Date().getTime() < expiresAt;\n  };\n}\n","import React, { Component } from \"react\";\nimport { Slide } from \"@material-ui/core\";\nimport {\n  Route,\n  RouteComponentProps,\n  withRouter,\n  Redirect,\n  Switch\n} from \"react-router\";\nimport {\n  Category,\n  Podcast,\n  PodcastEpisode,\n  MediaState\n} from \"../utility/types\";\nimport Navigation from \"./navigation/Navigation\";\nimport MediaPlayer from \"./player/MediaPlayer\";\nimport DataManager from \"../api/DataManager\";\nimport PodcastBrowser from \"./browse/PodcastBrowser\";\nimport PodcastDetail from \"./detail/PodcastDetail\";\nimport Subscriptions from \"./subscriptions/Subscriptions\";\nimport Callback from \"../auth/Callback\";\nimport Auth from \"../auth/Auth\";\nimport { access } from \"fs\";\n\n/**\n * State information for the application.\n */\ninterface ILayoutState {\n  podcastData: { [key: string]: Podcast[] };\n  categories: Category[];\n  dialogOpen: boolean;\n  media: MediaState | null;\n  auth: Auth;\n  api: DataManager;\n}\n\n/**\n * Required properties for the application.\n */\ninterface ILayoutProps extends RouteComponentProps {\n  isMobile: boolean;\n}\n\n/**\n * UI entry point into the application, handles routing and player interaction.\n */\nexport class Layout extends Component<ILayoutProps, ILayoutState> {\n  displayName = Layout.name;\n\n  constructor(props: ILayoutProps) {\n    super(props);\n\n    let api = new DataManager();\n    var episode = api.getCurrentPodcast();\n\n    this.state = {\n      auth: new Auth(props, this.updateApiAccessToken),\n      api: api,\n      podcastData: { top: [] },\n      categories: [],\n      dialogOpen: false,\n      media: episode != null ? { episode: episode, autoplay: false } : null\n    };\n  }\n\n  /**\n   * Called before the component finishes mounting,\n   * and loads all categories and podcasts into memory.\n   */\n  async componentWillMount() {\n    const { api } = this.state;\n\n    //Load category list and category data asynchronously.\n    let categories = await api.getCategories();\n    this.setState({ categories: categories || [] });\n\n    if (categories)\n      categories.forEach(async category => {\n        let id = category.id;\n        let podcasts = await api.getPodcastByCategory(id);\n        if (podcasts) {\n          let loadedPodcast = this.state.podcastData;\n\n          loadedPodcast[id] = podcasts;\n          this.setState({ podcastData: loadedPodcast });\n        }\n      });\n\n    //Load top podcast data asynchronously.\n    let podcasts = await api.getTopPodcasts();\n\n    if (podcasts) {\n      let loadedPodcasts = this.state.podcastData;\n      loadedPodcasts[\"top\"] = podcasts;\n      this.setState({ podcastData: loadedPodcasts });\n    }\n  }\n\n  /**\n   * Called when an episode has been selected for playback.\n   */\n  onEpisodeSelected = (episode: PodcastEpisode) => {\n    this.state.api.setCurrentPodcast(episode);\n\n    let media = this.state.media;\n    if (media) {\n      media.autoplay = true;\n      media.episode = episode;\n      this.setState({ media: media });\n    }\n  };\n\n  onDialogClose = () => {\n    let history = this.props.history;\n    if (history.length > 1) history.goBack();\n    else history.push(\"/top\");\n  };\n\n  handleAuthentication = (nextState: any, replace: any) => {\n    if (/access_token|id_token|error/.test(nextState.location.hash)) {\n      this.state.auth.handleAuthentication();\n    }\n  };\n\n  updateApiAccessToken = (accessToken: string) => {\n    let api = this.state.api;\n    api.accessToken = accessToken;\n\n    this.setState({ api: api });\n  };\n\n  render() {\n    const { podcastData, media, categories, auth, api } = this.state;\n    const { isMobile } = this.props;\n\n    /**\n     * Elements that can be routed to.\n     */\n    const RoutingContents = (\n      <Switch>\n        <Route\n          path=\"/top/\"\n          render={() => <PodcastBrowser podcasts={podcastData[\"top\"]} />}\n        />\n\n        <Route path=\"/subscribed/\" render={() => <Subscriptions api={api} />} />\n\n        <Route\n          path=\"/browse/:id/\"\n          render={props => (\n            <PodcastBrowser podcasts={podcastData[props.match.params.id]} />\n          )}\n        />\n\n        <Route\n          exact\n          path=\"/detail/:rss/\"\n          render={props => (\n            <PodcastDetail\n              open={true}\n              api={api}\n              rssFeed={props.match.params.rss}\n              selectedEpisode={media != null ? media.episode : null}\n              isMobile={isMobile}\n              isAuthenticated={auth.isAuthenticated()}\n              onClose={() => this.onDialogClose()}\n              onEpisodeSelected={episode => this.onEpisodeSelected(episode)}\n            />\n          )}\n        />\n\n        <Route\n          path=\"/callback\"\n          render={() => {\n            return <Callback auth={this.state.auth} />;\n          }}\n        />\n\n        <Redirect exact from=\"/\" to={\"/top\"} />\n      </Switch>\n    );\n\n    return (\n      <Navigation\n        categories={categories}\n        isMobile={isMobile}\n        auth={auth}\n        api={api}\n      >\n        <React.Fragment>\n          {RoutingContents}\n          {media != null && media.episode != null && (\n            <Slide direction={\"up\"} in={media.episode.content != null}>\n              <MediaPlayer media={media} isMobile={isMobile} api={api} />\n            </Slide>\n          )}\n        </React.Fragment>\n      </Navigation>\n    );\n  }\n}\n\nexport default withRouter(Layout);\n","import React, { Component } from \"react\";\nimport { isMobile } from \"./utility/DeviceUtils\";\nimport Layout from \"./components/Layout\";\nimport Auth from \"./auth/Auth\";\n\n/**\n * State information for the application.\n */\ninterface IAppState {\n  isMobile: boolean;\n}\n\n/**\n * Required properties for the application.\n */\ninterface IAppProps {}\n\n/**\n * UI entry point into the application, handles routing and player interaction.\n */\nexport default class App extends Component<IAppProps, IAppState> {\n  displayName = App.name;\n\n  constructor(props: IAppProps) {\n    super(props);\n\n    this.state = {\n      isMobile: false\n    };\n  }\n\n  /**\n   * Called after the component has mounted, and sets a resize event listener for state updates.\n   */\n  componentDidMount() {\n    this.updatePredicate();\n    window.addEventListener(\"resize\", this.updatePredicate);\n  }\n\n  /**\n   * Called when the component is unloaded, and removes a resize event listener for state updates.\n   */\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updatePredicate);\n  }\n\n  /**\n   * Checks the screen state of the current device for UI management.\n   */\n  updatePredicate = () => {\n    this.setState({ isMobile: isMobile() });\n  };\n\n  render() {\n    return <Layout {...this.state} />;\n  }\n}\n","/**\n * Returns true if the current device is a mobile device, false if not.\n */\nexport function isMobile(): boolean {\n  if (\n    /Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(\n      navigator.userAgent\n    ) ||\n    window.innerWidth < 700\n  ) {\n    return true;\n  }\n  return false;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/**\n * Initializes the routing component.\n */\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}